---
- hosts: all
  vars:
    deploy_user: deploy
    deploy_group: deploy
    api_server_domain: "slade360emr.com"
    server_domain: "www.slade360emr.com"
    pg_host: localhost
    pg_port: 5432
    lock_file_path: /tmp/ansible-playbook-backend.lock
    deploy_user_home: /home/{{deploy_user}}
    force_ignore_lock: false
    setup_new_ssl_certs: false
    libcloud_user: ''
    libcloud_key: ''
  name: Deploy the API server owned by the Slade360 EMR project

  tags: [ "emrapi", "staging" ]
  pre_tasks:
    - name: create deploy user
      user: name="{{deploy_user}}" groups=www-data,sudo state=present
      become: yes

    - name: check if lock_file exists
      stat: path={{lock_file_path}}
      register: lock_file

    - name: fail if lock_file exists and has not been ignored
      fail: msg="Sorry, someone is already running ansible. Add --force to your deploy command to forcefully continue deploying. This is useful if the previous deploy was aborted."
      when: lock_file.stat.exists|bool and not force_ignore_lock|bool

    - name: remove lock_file if it has been ignored
      file: path={{lock_file_path}} state=absent
      become: yes
      when: "{{force_ignore_lock}}"

    - name: touch lock file to update its timestamp
      file: path={{lock_file_path}} state=touch
      become: yes

  post_tasks:
    - name: deploy successful, remove lock_file
      file: path={{lock_file_path}} state=absent
      become: yes

  roles:
    - common
    - python
    - nginx
    - letsencrypt
    - postgresql-server
    - ufw
    - supervisor
    - redis
    - backports
    - memcached
    - {
      role: emrapi_staging,
      supervisor_conf_dir: /etc/supervisor/conf.d/,
      emr_root_domain: "slade360emr.com",
      server_name: "{{api_server_domain}}",
      setup_new_db: false,
      tags: ["emrapi", "staging"]
      }
